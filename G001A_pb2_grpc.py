# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import G001A_pb2 as G001A__pb2


class AlgorithmStub(object):
    """define algorithm service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DeviatPred = channel.unary_unary(
                '/rpc_package.Algorithm/DeviatPred',
                request_serializer=G001A__pb2.Inspt_Req.SerializeToString,
                response_deserializer=G001A__pb2.Ack_Res.FromString,
                )
        self.CoordnGetter = channel.unary_unary(
                '/rpc_package.Algorithm/CoordnGetter',
                request_serializer=G001A__pb2.Req.SerializeToString,
                response_deserializer=G001A__pb2.Coordn.FromString,
                )
        self.CoordnSetter = channel.unary_unary(
                '/rpc_package.Algorithm/CoordnSetter',
                request_serializer=G001A__pb2.Coordn.SerializeToString,
                response_deserializer=G001A__pb2.Ack_Res.FromString,
                )
        self.BrkPred = channel.unary_unary(
                '/rpc_package.Algorithm/BrkPred',
                request_serializer=G001A__pb2.Inspt_Req.SerializeToString,
                response_deserializer=G001A__pb2.Ack_Res.FromString,
                )
        self.ThresGetter = channel.unary_unary(
                '/rpc_package.Algorithm/ThresGetter',
                request_serializer=G001A__pb2.Req.SerializeToString,
                response_deserializer=G001A__pb2.Threshold.FromString,
                )
        self.ThresSetter = channel.unary_unary(
                '/rpc_package.Algorithm/ThresSetter',
                request_serializer=G001A__pb2.Threshold.SerializeToString,
                response_deserializer=G001A__pb2.Ack_Res.FromString,
                )
        self.MetarPred = channel.unary_unary(
                '/rpc_package.Algorithm/MetarPred',
                request_serializer=G001A__pb2.Inspt_Req.SerializeToString,
                response_deserializer=G001A__pb2.Ack_Res.FromString,
                )


class AlgorithmServicer(object):
    """define algorithm service
    """

    def DeviatPred(self, request, context):
        """Deviation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CoordnGetter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CoordnSetter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BrkPred(self, request, context):
        """break
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ThresGetter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ThresSetter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MetarPred(self, request, context):
        """material
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlgorithmServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DeviatPred': grpc.unary_unary_rpc_method_handler(
                    servicer.DeviatPred,
                    request_deserializer=G001A__pb2.Inspt_Req.FromString,
                    response_serializer=G001A__pb2.Ack_Res.SerializeToString,
            ),
            'CoordnGetter': grpc.unary_unary_rpc_method_handler(
                    servicer.CoordnGetter,
                    request_deserializer=G001A__pb2.Req.FromString,
                    response_serializer=G001A__pb2.Coordn.SerializeToString,
            ),
            'CoordnSetter': grpc.unary_unary_rpc_method_handler(
                    servicer.CoordnSetter,
                    request_deserializer=G001A__pb2.Coordn.FromString,
                    response_serializer=G001A__pb2.Ack_Res.SerializeToString,
            ),
            'BrkPred': grpc.unary_unary_rpc_method_handler(
                    servicer.BrkPred,
                    request_deserializer=G001A__pb2.Inspt_Req.FromString,
                    response_serializer=G001A__pb2.Ack_Res.SerializeToString,
            ),
            'ThresGetter': grpc.unary_unary_rpc_method_handler(
                    servicer.ThresGetter,
                    request_deserializer=G001A__pb2.Req.FromString,
                    response_serializer=G001A__pb2.Threshold.SerializeToString,
            ),
            'ThresSetter': grpc.unary_unary_rpc_method_handler(
                    servicer.ThresSetter,
                    request_deserializer=G001A__pb2.Threshold.FromString,
                    response_serializer=G001A__pb2.Ack_Res.SerializeToString,
            ),
            'MetarPred': grpc.unary_unary_rpc_method_handler(
                    servicer.MetarPred,
                    request_deserializer=G001A__pb2.Inspt_Req.FromString,
                    response_serializer=G001A__pb2.Ack_Res.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.Algorithm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Algorithm(object):
    """define algorithm service
    """

    @staticmethod
    def DeviatPred(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Algorithm/DeviatPred',
            G001A__pb2.Inspt_Req.SerializeToString,
            G001A__pb2.Ack_Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CoordnGetter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Algorithm/CoordnGetter',
            G001A__pb2.Req.SerializeToString,
            G001A__pb2.Coordn.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CoordnSetter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Algorithm/CoordnSetter',
            G001A__pb2.Coordn.SerializeToString,
            G001A__pb2.Ack_Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BrkPred(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Algorithm/BrkPred',
            G001A__pb2.Inspt_Req.SerializeToString,
            G001A__pb2.Ack_Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ThresGetter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Algorithm/ThresGetter',
            G001A__pb2.Req.SerializeToString,
            G001A__pb2.Threshold.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ThresSetter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Algorithm/ThresSetter',
            G001A__pb2.Threshold.SerializeToString,
            G001A__pb2.Ack_Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MetarPred(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.Algorithm/MetarPred',
            G001A__pb2.Inspt_Req.SerializeToString,
            G001A__pb2.Ack_Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SystemStub(object):
    """define system service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SystemGetter = channel.unary_unary(
                '/rpc_package.System/SystemGetter',
                request_serializer=G001A__pb2.Req.SerializeToString,
                response_deserializer=G001A__pb2.System_Info.FromString,
                )
        self.Restart = channel.unary_unary(
                '/rpc_package.System/Restart',
                request_serializer=G001A__pb2.Req.SerializeToString,
                response_deserializer=G001A__pb2.Ack_Res.FromString,
                )


class SystemServicer(object):
    """define system service
    """

    def SystemGetter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SystemServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SystemGetter': grpc.unary_unary_rpc_method_handler(
                    servicer.SystemGetter,
                    request_deserializer=G001A__pb2.Req.FromString,
                    response_serializer=G001A__pb2.System_Info.SerializeToString,
            ),
            'Restart': grpc.unary_unary_rpc_method_handler(
                    servicer.Restart,
                    request_deserializer=G001A__pb2.Req.FromString,
                    response_serializer=G001A__pb2.Ack_Res.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc_package.System', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class System(object):
    """define system service
    """

    @staticmethod
    def SystemGetter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.System/SystemGetter',
            G001A__pb2.Req.SerializeToString,
            G001A__pb2.System_Info.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc_package.System/Restart',
            G001A__pb2.Req.SerializeToString,
            G001A__pb2.Ack_Res.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
